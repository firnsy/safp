#!/usr/bin/perl

use strict;
use warnings;

use 5.010;
use lib './lib';


use AnyEvent;
use AnyEvent::Handle;
use Data::Dumper;
use Fcntl qw(SEEK_SET SEEK_CUR SEEK_END);
use Scalar::Util qw(weaken);


my $file_tail = '/tmp/logs/log.1';
my $file_tail2 = '/tmp/logs/log.2';
my $file_out  = '/tmp/out/log.1';

my $tail_h;
my $tail_h2;
my $out_h;

# open file for tailing
if( ! open($tail_h, '<', $file_tail) ) {
  close($tail_h);
  say("Can't open file " . $file_tail);
  exit(1);
}

if( ! open($tail_h2, '<', $file_tail2) ) {
  close($tail_h2);
  say("Can't open file " . $file_tail2);
  exit(1);
}




# open file for storing
if( ! open($out_h, '>', $file_out) ) {
  close($out_h);
  say("Can't open file " . $file_out);
  exit(1);
}


sub file_reader {
  my( $handle, $reader ) = @_;

  weaken($reader);

  my $_h; $_h = AnyEvent::Handle->new(
    fh => $tail_h,
    on_error => sub {

    },
    on_read  => sub {
      my($hdl) = @_;
      $hdl->push_read( line => sub {
        my($hdl, $line) = @_;

        print $out_h $hdl->offset() . ": " . $line;
      });
    },
    on_eof   => sub {
      my($hdl) = @_;

      my $o = $hdl->offset();
      say("EOF: " . $o);

#      file_watcher($
      $reader->{_t} = AE::timer(5, 5, sub {
        my $len = syseof($hdl->{fh});

        say("WEEE: " . $o . "||" . $len);

        if( $len > $o ) {
          undef($reader->{_t});
          say("GO AGAIN!");
          $reader->{_h}->reset_eof();
          $reader->{_h}->start_read();
        }
      });
    }
  );

  return $_h;
}

sub syseof {
  my $o = sysseek($_[0], 0, SEEK_CUR);
  sysseek($_[0], 0, SEEK_END);
  my $e = sysseek($_[0], 0, SEEK_CUR);
  sysseek($_[0], $o, SEEK_SET);
  return $e;
}

sub file_watcher {
#  my ($
};


my $cv = AnyEvent->condvar;


my $reader = {};

$reader->{_h} = file_reader($tail_h, $reader);



$cv->recv();

close($out_h);
close($tail_h);
close($tail_h2);

say("DONE");
